{"version":3,"sources":["AppContext.tsx","useCategory.ts","ProductContext.tsx","Search/Search.tsx","Home/Home.tsx","Order/Order.tsx","Order/useOrder.tsx","Admin/Admin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppContext","createContext","AppContextProvider","baseUrl","children","api","axios","create","baseURL","Provider","value","allCategory","id","name","ProductContext","React","ProductContextProvider","useState","products","setProducts","useContext","addToCart","useCallback","product","newProducts","map","prod","isAddedToCart","removeFromCart","fetchProduct","get","then","response","data","onSearchProduct","searchString","length","filter","find","clearAllCartProduct","productUpdated","useEffect","useProduct","isCartProduct","currentCategory","setNewProduct","forEach","push","quantity","productCategory","some","prodCategory","categoryId","deleteProductFromCart","incrementQuantity","prodIndex","findIndex","decrementQuantity","addProductToCart","totalCartItems","useMemo","onSearch","searchStr","removeProduct","incrementProduct","decrementProduct","Search","categories","selectCategory","totalItems","searchValue","setSearchValue","className","onChange","event","category","cat","Number","target","key","e","onClick","to","Home","setCategories","setCurrentCategory","values","useCategory","src","imageUrl","alt","width","height","price","payments","label","Order","onCreateOrder","order","post","JSON","stringify","headers","catch","_","useCreateOrder","history","useHistory","setName","email","setEmail","paymentTitle","setPaymentTitle","totalPrice","reduce","total","currentVal","submitOrder","a","preventDefault","companyId","createdBy","created","Date","toDateString","paymentMethod","orderRows","amount","productId","onSubmit","type","payment","Admin","orders","setOrders","loadOrders","useLoadOrders","i","DefaultPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.edea6d91.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport React, { createContext } from \"react\";\n\nexport interface AppConfig {\n  api?: AxiosInstance;\n}\n\n\ninterface Props {\n  baseUrl: string\n}\n\nexport const AppContext = createContext<AppConfig>({});\n\nexport const AppContextProvider: React.FC<Props> = ({ baseUrl, children }) => {\n  const api = axios.create({\n    baseURL: baseUrl,\n  });\n  \n  return <AppContext.Provider value={{ api }}>{children}</AppContext.Provider>;\n};\n\n\n","import { useContext, useState, useEffect, useMemo } from \"react\";\nimport { AppContext } from \"./AppContext\"\n\nexport interface Category {\n  id: number;\n  name: string;\n}\n\nexport const allCategory: Category = {\n  id: -1,\n  name: \"All\",\n};\n\nexport const useCategory = () => {\n  const { api } = useContext(AppContext);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [currentCategory, setCurrentCategory] = useState<Category>(allCategory);\n\n  useEffect(() => {\n    if (api) {\n      api\n        .get<Category[]>(\"categories\")\n        .then((response) => response.data)\n        .then((values) => {\n          setCategories(values);\n        });\n    }\n  }, [api] );\n\n  const newCategories = useMemo(() => [allCategory, ...categories], [\n    categories,\n  ]);\n\n  return {\n    currentCategory,\n    categories: newCategories,\n    selectCategory: setCurrentCategory,\n  };\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport { AppContext } from \"./AppContext\";\nimport { Product } from \"./types\";\nimport { allCategory, Category } from \"./useCategory\";\n\ninterface ProductContext {\n  products?: Product[];\n  addToCart?: (product: Product) => void;\n  removeFromCart?: (product: Product) => void;\n  onSearchProduct?: (searchStr: string) => void;\n  clearAllCartProduct?: () => void;\n}\n\nconst ProductContext = React.createContext<ProductContext>({});\n\nexport const ProductContextProvider: React.FC = ({ children }) => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const { api } = useContext(AppContext);\n\n  const addToCart = useCallback((product) => {\n    const newProducts = products.map((prod) => {\n      if (prod.id === product.id) {\n        return { ...product, isAddedToCart: true };\n      }\n      return prod;\n    });\n    setProducts([...newProducts]);\n  }, [products] );\n\n  const removeFromCart = useCallback((product) => {\n    const newProducts = products.map((prod) => {\n      if (prod.id === product.id) {\n        return { ...product, isAddedToCart: false };\n      }\n      return prod;\n    });\n    setProducts([...newProducts]);\n  }, [products] );\n\n  const fetchProduct = useCallback(() => {\n    if (api) {\n      api\n        .get(\"products\")\n        .then((response) => {\n          return response.data;\n        })\n        .then((data) => {\n          setProducts(data);\n        });\n    }\n  }, [api] );\n\n  const onSearchProduct = useCallback((searchString: string) => {\n    if (api) {\n      if (searchString.length > 0) {\n        api\n          .get(`search?searchText=${searchString}`)\n          .then((response) => {\n            return response.data;\n          })\n          .then((data: Product[]) => {\n            const newProducts: Product[] = products.filter((prod) => {\n              const doesExist = data.find(\n                (product) => product.id === prod.id\n              );\n              return !!doesExist;\n            });\n            setProducts(newProducts);\n          });\n      } else {\n        fetchProduct();\n      }\n    }\n  }, [api, products, fetchProduct] );\n\n  const clearAllCartProduct = useCallback(() => {\n    const productUpdated = products.map(({ isAddedToCart, ...product }) => ({\n      ...product,\n      isAddedToCart: isAddedToCart ? false : isAddedToCart,\n    }));\n    setProducts(productUpdated);\n  }, [products]);\n\n  useEffect(() => {\n    fetchProduct();\n  }, [fetchProduct]);\n\n  return (\n    <ProductContext.Provider\n      value={{\n        addToCart,\n        removeFromCart,\n        products,\n        onSearchProduct,\n        clearAllCartProduct,\n      }}\n    >\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\ninterface CartProduct extends Product {\n  quantity: number;\n}\n\nexport const useProduct = (isCartProduct: boolean = false, currentCategory: Category = allCategory) => {\n  const [newProducts, setNewProduct] = useState<CartProduct[]>([]);\n  const {\n    products,\n    removeFromCart,\n    addToCart,\n    onSearchProduct,\n    clearAllCartProduct,\n  } = useContext(ProductContext);\n\n  useEffect(() => {\n    let newProducts: CartProduct[] = [];\n\n    if (products) {\n      if (isCartProduct) {\n        products\n          .filter(({ isAddedToCart }) => isAddedToCart)\n          .forEach((product) => {\n            newProducts.push({ ...product, quantity: 1 });\n          });\n      } else {\n        products\n          .filter((prod) => {\n            const isFilter = prod.productCategory.some(\n              (prodCategory) => prodCategory.categoryId === currentCategory.id\n            );\n            return isFilter || currentCategory.id === -1;\n          })\n          .forEach((product) => {\n            newProducts.push({ ...product, quantity: 1 });\n          });\n      }\n      setNewProduct([...newProducts]);\n    }\n  }, [products, isCartProduct, currentCategory]);\n\n  const deleteProductFromCart = useCallback((product: CartProduct) => {\n    const prod = products?.find((prod) => prod.id === product.id);\n    if (prod) {\n      removeFromCart && removeFromCart(prod);\n    }\n  }, [products, removeFromCart] );\n\n  const incrementQuantity = useCallback((product: CartProduct) => {\n    const prodIndex = newProducts.findIndex((prod) => prod.id === product.id);\n\n    const products = [...newProducts];\n    if (prodIndex >= 0) {\n      products[prodIndex].quantity += 1;\n    }\n    setNewProduct(products);\n  }, [newProducts] );\n\n  const decrementQuantity = useCallback((product: CartProduct) => {\n    const prodIndex = newProducts.findIndex((prod) => prod.id === product.id);\n\n    const products = [...newProducts];\n    if (prodIndex >= 0 && product.quantity > 1) {\n      products[prodIndex].quantity -= 1;\n    }\n    setNewProduct(products);\n  }, [newProducts] );\n\n  const addProductToCart = useCallback(({ quantity, ...product }: CartProduct) => {\n      addToCart && addToCart(product);\n    }, [addToCart] );\n\n  const totalCartItems = useMemo(() =>\n      products\n        ? products.filter(({ isAddedToCart }) => isAddedToCart).length\n        : 0,\n    [products]\n  );\n\n  const onSearch = useCallback((searchStr: string) => {\n    if (onSearchProduct) {\n      onSearchProduct(searchStr);\n    }\n  }, [onSearchProduct] );\n\n  return {\n    products: newProducts,\n    removeProduct: deleteProductFromCart,\n    incrementProduct: incrementQuantity,\n    decrementProduct: decrementQuantity,\n    addToCart: addProductToCart,\n    clearAllCartProduct,\n    totalCartItems,\n    onSearch,\n  };\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Category } from \"../useCategory\";\nimport \"./Search.css\";\n\ninterface Props {\n  categories: Category[];\n  selectCategory: (category: Category) => void;\n  totalItems: number;\n  onSearch: (searchStr: string) => void;\n}\n\nexport const Search: React.FC<Props> = ({\n  categories,\n  selectCategory,\n  totalItems,\n  onSearch,\n  }) => {\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n  return (\n    <div className=\"search-container\">\n      <div className=\"input-wrapper\">\n        <select\n          onChange={(event) => {\n            const category = categories.find(\n              (cat) => cat.id === Number(event.target.value)\n            );\n            category && selectCategory(category);\n          }}\n        >\n          {categories.map((category) => (\n            <option value={category.id} key={category.id}>\n              {category.name}\n            </option>\n          ))}\n        </select>\n        <input\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n        />\n        <button\n          onClick={() => {\n            onSearch(searchValue);\n          }}\n        >\n          Search\n        </button>\n      </div>\n      <div className=\"cart-wrapper\">\n        <Link to=\"/order/\">\n          {\" \"}\n          {`${totalItems ? totalItems : 0} items in the cart`}\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useProduct } from \"../ProductContext\";\nimport { Search } from \"../Search\";\nimport { useCategory } from \"../useCategory\";\nimport \"./Home.css\";\n\nexport const Home: React.FC = () => {\n  const { currentCategory, selectCategory, categories } = useCategory();\n  const { products, addToCart, totalCartItems, onSearch } = useProduct(\n    false,\n    currentCategory\n  );\n  \n\n  return (\n    <div className=\"container\">\n      <div className=\"product-search-wrapper\">\n        <div className=\"search-wrapper\">\n          <Search\n            categories={categories}\n            selectCategory={selectCategory}\n            totalItems={totalCartItems}\n            onSearch= {onSearch}\n          />\n        </div>\n        <div className=\"relative-wrapper\">\n          <div className=\"absolute-wrapper\">\n            <div className=\"height-wrapper\">\n              <div className=\"product-wrapper\">\n                {products &&\n                  products.map((product) => {\n                    return (\n                      <div key={product.id} className=\"product\">\n                        <div className=\"product-name\">{product.name}</div>\n                        <div>\n                          <img\n                            src={product.imageUrl}\n                            alt=\"\"\n                            width=\"150px\"\n                            height=\"150px\"\n                          />\n                        </div>\n                        <ul className=\"product-action\">\n                          <li>Price: {product.price}</li>\n                          <li>\n                            {!product.isAddedToCart && (\n                              <button\n                                onClick={() => {\n                                  addToCart && addToCart(product);\n                                }}\n                              >\n                                Add to cart\n                              </button>\n                            )}\n                          </li>\n                        </ul>\n                      </div>\n                    );\n                  })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { useProduct } from \"../ProductContext\";\nimport \"./Order.css\";\nimport { useCreateOrder } from \"./useOrder\";\nimport { useHistory } from \"react-router-dom\";\n\nconst payments = [\n  {\n    id: 1,\n    label: \"MasterCard\",\n  },\n  {\n    id: 2,\n    label: \"Paypal\",\n  },\n  {\n    id: 3,\n    label: \"Bitcoin\",\n  },\n];\n\n// {\"id\":1797,\"productId\":76,\"product\":null,\"amount\":1,\"orderId\":1243}\n\nexport const Order: React.FC = () => {\n  const {\n    products,\n    removeProduct,\n    incrementProduct,\n    decrementProduct,\n    clearAllCartProduct,\n  } = useProduct(true);\n  const onCreateOrder = useCreateOrder();\n  const history = useHistory();\n  const [name, setName] = useState(\"Your Name\");\n  const [email, setEmail] = useState(\"Your Email\");\n  const [paymentTitle, setPaymentTitle] = useState(\"MasterCard\");\n\n  const totalPrice = useMemo(\n    () =>\n      products\n        .map(({ price, quantity }) => price * quantity)\n        .reduce((total, currentVal) => {\n          return total + currentVal;\n        }, 0),\n    [products]\n  );\n\n  const submitOrder = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      const order = {\n        companyId: 64,\n        createdBy: email,\n        name,\n        created: new Date().toDateString(),\n        paymentMethod: paymentTitle,\n        totalPrice,\n        orderRows: products\n          .filter(({ isAddedToCart }) => isAddedToCart)\n          .map(({ quantity, id }) => ({ amount: quantity, productId: id })),\n      };\n      const isSucess = await onCreateOrder(order);\n      if (isSucess) {\n        clearAllCartProduct && clearAllCartProduct();\n\n        history.push(\"/\");\n      }\n    },\n    [\n      onCreateOrder,\n      clearAllCartProduct,\n      history,\n      products,\n      name,\n      paymentTitle,\n      email,\n      totalPrice,\n    ]\n  );\n\n  return (\n    <div className=\"order-wrapper\">\n      <div className=\"name-filler\">\n        <form onSubmit={submitOrder}>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n          </label>\n          <label>\n            Email:\n            <input\n              type=\"text\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n          </label>\n          <label>\n            Payment Method:\n            <select\n              onChange={(e) => {\n                setPaymentTitle(e.target.value);\n              }}\n            >\n              {payments.map((payment) => (\n                <option key={payment.id}>{payment.label}</option>\n              ))}\n            </select>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n      <div className=\"title-product-wrapper\">\n        <div className=\"title\">\n          <div>Product Image</div>\n          <div>Product Title</div>\n          <div>Product Action</div>\n          <div>Total Cost: {totalPrice}</div>\n        </div>\n        <div className=\"products-container-wrapper\">\n          <div className=\"products-container\">\n            <div className=\"absolute-container\">\n              <div className=\"height-scroll-wrapper\">\n                {products &&\n                  products\n                    .filter(({ isAddedToCart }) => isAddedToCart)\n                    .map((prod) => (\n                      <div key={prod.name} className=\"cart-product\">\n                        <div>\n                          <img\n                            src={prod.imageUrl}\n                            alt=\"\"\n                            width=\"150px\"\n                            height=\"150px\"\n                          />\n                        </div>\n                        <div>{prod.name}</div>\n                        <div className=\"action-product\">\n                          <h5>Quantity: {prod.quantity}</h5>\n                          <button\n                            className=\"action-btn\"\n                            onClick={() => incrementProduct(prod)}\n                          >\n                            +\n                          </button>\n                          <button\n                            className=\"action-btn\"\n                            onClick={() => decrementProduct(prod)}\n                          >\n                            -\n                          </button>\n                          <button onClick={() => removeProduct(prod)}>\n                            Remove\n                          </button>\n                        </div>\n                        <div>{prod.price * prod.quantity}</div>\n                      </div>\n                    ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useContext, useState, useEffect } from \"react\";\nimport { AppContext } from \"../AppContext\";\n\ninterface OrderRow {\n  productId: number;\n  amount: number;\n}\n\nexport interface OrderData {\n  companyId: number;\n  createdBy: string;\n  name: string;\n  created: string;\n  paymentMethod: string;\n  totalPrice: number;\n  orderRows: OrderRow[];\n}\n\nexport const useCreateOrder = () => {\n  const { api } = useContext(AppContext);\n\n  const onCreate = useCallback(\n    (order: OrderData) => {\n      if (api) {\n        return api\n          .post(\"orders\", JSON.stringify(order), {\n            headers: { \"Content-Type\": \"application/json\" },\n          })\n          .then<OrderData>((response) => response.data)\n          .then((value) => value)\n          .catch((_) => true);\n      }\n    },\n    [api]\n  );\n  return onCreate;\n};\n\nexport const useLoadOrders = () => {\n  const { api } = useContext(AppContext);\n  const [orders, setOrders] = useState<OrderData[]>([]);\n\n  const loadOrders = useCallback(() => {\n    if (api) {\n      api\n        .get(\"orders?companyId=64\")\n        .then<OrderData[]>((response) => response.data)\n        .then((value) => setOrders(value))\n        .catch((_) => setOrders([]));\n    }\n  }, [api]);\n  useEffect(() => {\n    loadOrders();\n  }, [loadOrders]);\n  return {\n    orders,\n  };\n};\n","import React from \"react\";\nimport { useLoadOrders } from \"../Order\";\n\nexport const Admin: React.FC = () => {\n  const { orders } = useLoadOrders();\n\n  return (\n    <div className=\"title-product-wrapper\">\n      <div className=\"title\">\n        <div>Date of Order</div>\n        <div>Order By</div>\n        <div>Order Cost</div>\n        <div>Total Ordered Items</div>\n      </div>\n      <div className=\"products-container-wrapper\">\n        <div className=\"products-container\">\n          <div className=\"absolute-container\">\n            <div className=\"height-scroll-wrapper\">\n              {orders.map((order, i) => (\n                <div key={i} className=\"cart-product\">\n                  <div>{new Date(order.created).toDateString()}</div>\n                  <div>{order.createdBy}</div>\n                  <div>{order.totalPrice}</div>\n                  <div>{order.orderRows.length}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AppContextProvider } from \"./AppContext\";\nimport { Home } from \"./Home\";\nimport { Order } from \"./Order\";\nimport { Admin } from \"./Admin\";\nimport { ProductContextProvider } from \"./ProductContext\";\nimport \"./App.css\"\n\nconst baseURL: string =\n  \"https://medieinstitutet-wie-products.azurewebsites.net/api/\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app-wrapper\">\n      <AppContextProvider baseUrl={baseURL}>\n        <ProductContextProvider>\n          <Router>\n            <div className=\"nav-wrapper\">\n              <div>\n                <Link to=\"/\">Home</Link>\n              </div>\n              <div>\n                <Link to=\"/order\">Orders</Link>\n              </div>\n              <div>\n                <Link to=\"/admin\">Administration</Link>\n              </div>\n            </div>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/order/\" component={Order} />\n              <Route path=\"/admin/\" component={Admin} />\n              <Route component={DefaultPage} />\n            </Switch>\n          </Router>\n        </ProductContextProvider>\n      </AppContextProvider>\n    </div>\n  );\n};\n\nconst DefaultPage = () => {\n  return <div>Not Found</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}